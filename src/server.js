import dotenv from 'dotenv';
import app from './app.js';
import prisma from './lib/prisma.js';

dotenv.config();

const PORT = process.env.PORT || 5000;

async function main() {
  try {
    // üöÄ Professional connection handling
    console.log('üîå Veritabanƒ±na baƒülanƒ±lƒ±yor...');
    
    await Promise.race([
      prisma.$connect(),
      new Promise((_, reject) => 
        setTimeout(() => reject(new Error('Database connection timeout')), 15000)
      )
    ]);
    
    console.log('‚úÖ Veritabanƒ±na ba≈üarƒ±yla baƒülandƒ±');
    
    // Server ba≈ülat
    const server = app.listen(PORT, () => {
      console.log(`üöÄ Server ${PORT} portunda √ßalƒ±≈üƒ±yor`);
      console.log(`üìù Environment: ${process.env.NODE_ENV || 'development'}`);
    });

    // Graceful shutdown i√ßin server referansƒ±nƒ± sakla
    process.server = server;
    
  } catch (error) {
    console.error('‚ùå Sunucu ba≈ülatƒ±lamadƒ±:', error.message);
    await prisma.$disconnect();
    process.exit(1);
  }
}

main().catch(async (error) => {
  console.error('‚ùå Ana fonksiyon hatasƒ±:', error);
  await prisma.$disconnect();
  process.exit(1);
});

// üöÄ Professional graceful shutdown
const gracefulShutdown = async (signal) => {
  console.log(`\nüì° ${signal} sinyali alƒ±ndƒ±, g√ºvenli kapatma ba≈ülatƒ±lƒ±yor...`);
  
  try {
    // Server'ƒ± durdur
    if (process.server) {
      process.server.close(() => {
        console.log('üîå HTTP server kapatƒ±ldƒ±');
      });
    }
    
    // Database baƒülantƒ±sƒ±nƒ± kapat
    await prisma.$disconnect();
    console.log('üíæ Veritabanƒ± baƒülantƒ±sƒ± kapatƒ±ldƒ±');
    
    console.log('‚úÖ G√ºvenli kapatma tamamlandƒ±');
    process.exit(0);
    
  } catch (error) {
    console.error('‚ùå Kapatma sƒ±rasƒ±nda hata:', error);
    process.exit(1);
  }
};

process.on('SIGINT', () => gracefulShutdown('SIGINT'));
process.on('SIGTERM', () => gracefulShutdown('SIGTERM'));

// Uncaught exception handling
process.on('uncaughtException', (error) => {
  console.error('‚ùå Uncaught Exception:', error);
  gracefulShutdown('UNCAUGHT_EXCEPTION');
});

process.on('unhandledRejection', (reason, promise) => {
  console.error('‚ùå Unhandled Rejection at:', promise, 'reason:', reason);
  gracefulShutdown('UNHANDLED_REJECTION');
}); 